plot(x=Cdata[1],y=Cdata[3])
library(SoilR)
library(FME)
library(RColorBrewer)
library(expm)
library(parallel)
setwd("~/Documents/MSCA/DISEQ/Prades model") # set path.
# -----------------------------------------------------------------------------------------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------------------------------------------------------------------------------------
M=function(t,B,u){expm(t*B)%*%u} # Mass carbon.
Rt=function(t, B, u){diag(colSums(-B))%*%expm(t*B)%*%u} # Respiratory losses.
# create natrix B,
makeB=function(pars){
B=diag(-1*pars[1:7])
B[2,1]=pars["alpha21"]*pars["k1"]
B[3,1]=pars["alpha31"]*pars["k1"]
B[4,1]=pars["alpha41"]*pars["k1"]
B[5,2]=pars["alpha52"]*pars["k2"]
B[6,2]=pars["alpha62"]*pars["k2"]
B[4,3]=pars["alpha43"]*pars["k3"]
B[6,3]=pars["alpha63"]*pars["k3"]
B[7,3]=pars["alpha73"]*pars["k3"]
B[6,4]=pars["alpha64"]*pars["k4"]
B[6,5]=pars["alpha65"]*pars["k5"]
B[7,6]=pars["alpha76"]*pars["k6"]
return(B)
}
ecoModel=function(pars,GPP){
mod=Model(t=yr,A=makeB(pars),ivList=P0,inputFluxes=c(GPP,rep(0,6)),pass=TRUE)
Ct=getC(mod)
colnames(Ct)<-c("Fol","Wood","FL","CWD","SA","SB")
return(data.frame(time=yr, Ct))
}
ecoCost=function(pars,GPP){
out=ecoModel(pars,GPP)
cost1=modCost(model=out,obs=obsFol,weight="none")
cost2=modCost(model=out,obs=obsWood,cost=cost1,weight="none")
cost3=modCost(model=out,obs=obsFL,cost=cost2,weight="std")
cost4=modCost(model=out,obs=obsCWD,cost=cost3,weight="mean")
cost5=modCost(model=out,obs=obsSC,cost=cost4,weight="none")
return(cost5)
}
randomFit=function(GPP){
ecoFit=modFit(f=ecoCost,p=inipars,GPP=GPP,lower=0,upper=c(rep(3,7),rep(1,9)), method="Marq")
cp=coef(ecoFit)
return(cp)
}
meanSATTs=function(u, B){
x=-1*solve(B)%*%u
SA=sum(-1*solve(B)%*%x)/(sum(x))
TT=sum(x)/sum(u)
return(c(x=sum(x),SA=SA,TT=TT))
}
makeMod=function(pars,GPP){
B=makeB(pars)
u=matrix(c(GPP,rep(0,6)),7,1)
SATT=meanSATTs(u,B)
return(SATT)
}
allObjects=ls()
clusterExport(cl, varlist=c(allObjects, "modFit", "ode","modCost","Model", "getC"))
setwd("~/Documents/MSCA/DISEQ/Prades model") # set path.
# -----------------------------------------------------------------------------------------------------------------------------------------------------------
# Cores
# -----------------------------------------------------------------------------------------------------------------------------------------------------------
# Calculate the number of cores
no_cores=detectCores() #- 10
# Initiate cluster
cl <- makeCluster(no_cores)
# -----------------------------------------------------------------------------------------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------------------------------------------------------------------------------------
M=function(t,B,u){expm(t*B)%*%u} # Mass carbon.
Rt=function(t, B, u){diag(colSums(-B))%*%expm(t*B)%*%u} # Respiratory losses.
# create natrix B,
makeB=function(pars){
B=diag(-1*pars[1:7])
B[2,1]=pars["alpha21"]*pars["k1"]
B[3,1]=pars["alpha31"]*pars["k1"]
B[4,1]=pars["alpha41"]*pars["k1"]
B[5,2]=pars["alpha52"]*pars["k2"]
B[6,2]=pars["alpha62"]*pars["k2"]
B[4,3]=pars["alpha43"]*pars["k3"]
B[6,3]=pars["alpha63"]*pars["k3"]
B[7,3]=pars["alpha73"]*pars["k3"]
B[6,4]=pars["alpha64"]*pars["k4"]
B[6,5]=pars["alpha65"]*pars["k5"]
B[7,6]=pars["alpha76"]*pars["k6"]
return(B)
}
ecoModel=function(pars,GPP){
mod=Model(t=yr,A=makeB(pars),ivList=P0,inputFluxes=c(GPP,rep(0,6)),pass=TRUE)
Ct=getC(mod)
colnames(Ct)<-c("Fol","Wood","FL","CWD","SA","SB")
return(data.frame(time=yr, Ct))
}
ecoCost=function(pars,GPP){
out=ecoModel(pars,GPP)
cost1=modCost(model=out,obs=obsFol,weight="none")
cost2=modCost(model=out,obs=obsWood,cost=cost1,weight="none")
cost3=modCost(model=out,obs=obsFL,cost=cost2,weight="std")
cost4=modCost(model=out,obs=obsCWD,cost=cost3,weight="mean")
cost5=modCost(model=out,obs=obsSC,cost=cost4,weight="none")
return(cost5)
}
randomFit=function(GPP){
ecoFit=modFit(f=ecoCost,p=inipars,GPP=GPP,lower=0,upper=c(rep(3,7),rep(1,9)), method="Marq")
cp=coef(ecoFit)
return(cp)
}
meanSATTs=function(u, B){
x=-1*solve(B)%*%u
SA=sum(-1*solve(B)%*%x)/(sum(x))
TT=sum(x)/sum(u)
return(c(x=sum(x),SA=SA,TT=TT))
}
makeMod=function(pars,GPP){
B=makeB(pars)
u=matrix(c(GPP,rep(0,6)),7,1)
SATT=meanSATTs(u,B)
return(SATT)
}
allObjects=ls()
clusterExport(cl, varlist=c(allObjects, "modFit", "ode","modCost","Model", "getC"))
plot(x=Cdata[1],y=Cdata[3])
Cdata
# -----------------------------------------------------------------------------------------------------------------------------------------------------------
treat='Control' # Treatment: select 'Control' or 'Drought'
if (treat=='Control'){
Cdata<-read.csv("Data/Prades_data_control.csv")
} else if (treat=='Drought'){
Cdata<-read.csv("Data/Prades_data_drought.csv")
} else {
print("Select a treatment")
}
Cdata
plot(x=Cdata[1],y=Cdata[3])
plot(x=Cdata$Year,y=Cdata$Leaves)
plot(x=Cdata[1],y=Cdata$Leaves)
Cdata[1]
Cdata[1][1]
Cdata[1][1][1]
Cdata[1]
aa='Leaves'
Cdata$+aa
Cdata$aa
Cdata+aa
names(Cdata\)
names(Cdata)
Cdata[,1]
plot(x=Cdata[,1],y=Cdata$Leaves)
plot(x=Cdata[,1],y=Cdata[,3])
par(mfrow=c(4,2))
for (i in 3:4){
plot(x=Cdata[,1],y=Cdata[,i],
col="#69b3a2",
pch=20,
cex=1,
xlab="time [years]", ylab=expression("C stocks " ~(MgC~ha^{-1})),
main=poolnames[i-2])
}
poolnames=c("Foliage", "Wood", "Roots", "Thin litter", "Thick litter", "Soil carbon A", "Soil carbon B")
par(mfrow=c(4,2))
for (i in 3:4){
plot(x=Cdata[,1],y=Cdata[,i],
col="#69b3a2",
pch=20,
cex=1,
xlab="time [years]", ylab=expression("C stocks " ~(MgC~ha^{-1})),
main=poolnames[i-2])
}
par(mfrow=c(4,2))
for (i in 3:9){
plot(x=Cdata[,1],y=Cdata[,i],
col="#69b3a2",
pch=20,
cex=1,
xlab="time [years]", ylab=expression("C stocks " ~(MgC~ha^{-1})),
main=poolnames[i-2])
}
i
Cdata[,i]
Cdata[9]
Cdata
poolnamesd=c("Foliage", "Wood", "Thin litter", "Thick litter", "Soil carbon A", "Soil carbon B")
par(mfrow=c(4,2))
for (i in 3:8){
plot(x=Cdata[,1],y=Cdata[,i],
col="#69b3a2",
pch=20,
cex=1,
xlab="time [years]", ylab=expression("C stocks " ~(MgC~ha^{-1})),
main=poolnamesd[i-2])
}
windows(width = 12, height = 10)
pdf("Stocks.pdf", 8, 4)
par(mfrow=c(4,2))
for (i in 3:8){
plot(x=Cdata[,1],y=Cdata[,i],
col="#69b3a2",
pch=20,
cex=1,
xlab="time [years]", ylab=expression("C stocks " ~(MgC~ha^{-1})),
main=poolnamesd[i-2])
}
pdf("Stocks.pdf", 8,8)
par(mfrow=c(4,2))
for (i in 3:8){
plot(x=Cdata[,1],y=Cdata[,i],
col="#69b3a2",
pch=20,
cex=1,
xlab="time [years]", ylab=expression("C stocks " ~(MgC~ha^{-1})),
main=poolnamesd[i-2])
}
dev.off()
pdf("Stocks.pdf", 8,6)
par(mfrow=c(4,2))
for (i in 3:8){
plot(x=Cdata[,1],y=Cdata[,i],
col="#69b3a2",
pch=20,
cex=1,
xlab="time [years]", ylab=expression("C stocks " ~(MgC~ha^{-1})),
main=poolnamesd[i-2])
}
dev.off()
pdf("Stocks.pdf",6,8)
par(mfrow=c(4,2))
for (i in 3:8){
plot(x=Cdata[,1],y=Cdata[,i],
col="#69b3a2",
pch=20,
cex=1,
xlab="time [years]", ylab=expression("C stocks " ~(MgC~ha^{-1})),
main=poolnamesd[i-2])
}
dev.off()
pdf("Stocks.pdf",5,8)
par(mfrow=c(4,2))
for (i in 3:8){
plot(x=Cdata[,1],y=Cdata[,i],
col="#69b3a2",
pch=20,
cex=1,
xlab="time [years]", ylab=expression("C stocks " ~(MgC~ha^{-1})),
main=poolnamesd[i-2])
}
dev.off()
pdf("Stocks.pdf",5,10)
par(mfrow=c(4,2))
for (i in 3:8){
plot(x=Cdata[,1],y=Cdata[,i],
col="#69b3a2",
pch=20,
cex=1,
xlab="time [years]", ylab=expression("C stocks " ~(MgC~ha^{-1})),
main=poolnamesd[i-2])
}
dev.off()
::: {.callout-important collapse="true"}
# Chunk 1
### libraries for R
#    bibliography: refs_svb.bib
library(readxl)
library(ggplot2)
library(tidyr)
library(tidyverse)
